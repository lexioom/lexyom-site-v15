// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3Qa6q3s1gm91eHXRuPwyBY
// Component: AOX_A0VGq9rP
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: c0t49AwPo7/component
import { Video } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: RhitNJW5Zu-/codeComponent
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import Button from "../../Button"; // plasmic-import: jWSf9Dy_4GKo/component
import GetStartedButtons from "../../GetStartedButtons"; // plasmic-import: 6aSq1B1u45/component
import Footer from "../../Footer"; // plasmic-import: 5S4FajIL-oi/component
import { useScreenVariants as useScreenVariantsglmAo6RxnuGek } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GlmAO6RxnuGek/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_lexyom_site_v_1.module.css"; // plasmic-import: 3Qa6q3s1gm91eHXRuPwyBY/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: AOX_A0VGq9rP/css
import PrivacySvgrepoComsvgIcon from "./icons/PlasmicIcon__PrivacySvgrepoComsvg"; // plasmic-import: BWHY9zXLO5/icon
import EmployeeSvgrepoComsvgIcon from "./icons/PlasmicIcon__EmployeeSvgrepoComsvg"; // plasmic-import: g12zhrCk4t/icon
import EmployeesSvgrepoComsvgIcon from "./icons/PlasmicIcon__EmployeesSvgrepoComsvg"; // plasmic-import: iDNHArTXHm/icon
import WorldSvgrepoComsvgIcon from "./icons/PlasmicIcon__WorldSvgrepoComsvg"; // plasmic-import: p4IUrDRD65/icon
import SignatureDocSvgrepoComsvgIcon from "./icons/PlasmicIcon__SignatureDocSvgrepoComsvg"; // plasmic-import: lNMDN9rTgI/icon
import DealSvgrepoComsvgIcon from "./icons/PlasmicIcon__DealSvgrepoComsvg"; // plasmic-import: FZlsgF0C0-/icon
import CustomerServiceSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__CustomerServiceSvgrepoCom1Svg"; // plasmic-import: hDN-H0ESm-/icon
import MoreSvgrepoComsvgIcon from "./icons/PlasmicIcon__MoreSvgrepoComsvg"; // plasmic-import: N6iq0N4pgM/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: cZ4A75xhOp2J/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: aLWinbrsfkwl/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array(
  "startIcon",
  "children",
  "endIcon",
  "startIcon2",
  "children2",
  "endIcon2",
  "startIcon3",
  "children3",
  "endIcon3"
);

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsglmAo6RxnuGek()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Lexyom"}</title>
        <meta key="og:title" property="og:title" content={"Lexyom"} />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/13c5eb3ba40525bc964f677f137aa47b.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root2"}
          data-plasmic-override={overrides.root2}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root2
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zsxL)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z31Xp
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#272727" }}
                  >
                    {"Simple. Faster. Together."}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ml2Mu
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#272727" }}
                      >
                        {"Legal made easy"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </h1>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>

              <div
                data-plasmic-name={"whatWeDoStack"}
                data-plasmic-override={overrides.whatWeDoStack}
                className={classNames(projectcss.all, sty.whatWeDoStack)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vmemT
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"What would you like to "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FF4B14" }}
                      >
                        {"create"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {" with Lexyom today?"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                ) : null}

                <p.Stack
                  as={"section"}
                  data-plasmic-name={"whatWeDo"}
                  data-plasmic-override={overrides.whatWeDo}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.whatWeDo)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cmYDq)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wuBYt
                        )}
                      >
                        <div
                          data-plasmic-name={"item"}
                          data-plasmic-override={overrides.item}
                          className={classNames(projectcss.all, sty.item)}
                        >
                          <p.PlasmicLink
                            data-plasmic-name={"httpsapplexyomcomlogin8"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin8
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.httpsapplexyomcomlogin8
                            )}
                            component={Link}
                            href={"https://app.lexyom.com/login"}
                            platform={"nextjs"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jl8Fz
                              )}
                            >
                              <PrivacySvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yOxfh
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wkSkd
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zYmZj
                                )}
                              >
                                {"Non-Disclosure Agreements"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </div>

                        <p.PlasmicLink
                          data-plasmic-name={"item2"}
                          data-plasmic-override={overrides.item2}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.item2
                          )}
                          component={Link}
                          href={"https://app.lexyom.com/login"}
                          platform={"nextjs"}
                        >
                          <div
                            data-plasmic-name={"httpsapplexyomcomlogin2"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.httpsapplexyomcomlogin2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oFiny
                              )}
                            >
                              <EmployeeSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hXxCn
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xLLr4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v1DK
                                )}
                              >
                                {"Freelancer Agreement"}
                              </div>
                            </div>
                          </div>
                        </p.PlasmicLink>

                        <div
                          data-plasmic-name={"item3"}
                          data-plasmic-override={overrides.item3}
                          className={classNames(projectcss.all, sty.item3)}
                        >
                          <p.PlasmicLink
                            data-plasmic-name={"httpsapplexyomcomlogin"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.httpsapplexyomcomlogin
                            )}
                            component={Link}
                            href={"https://app.lexyom.com/login"}
                            platform={"nextjs"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vhLvx
                              )}
                            >
                              <EmployeesSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__quMn8
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__by1Ok
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4QWS
                                )}
                              >
                                {"ESOP"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </div>

                        <div
                          data-plasmic-name={"item4"}
                          data-plasmic-override={overrides.item4}
                          className={classNames(projectcss.all, sty.item4)}
                        >
                          <p.PlasmicLink
                            data-plasmic-name={"httpsapplexyomcomlogin3"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin3
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.httpsapplexyomcomlogin3
                            )}
                            component={Link}
                            href={"https://app.lexyom.com/login"}
                            platform={"nextjs"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qtAUl
                              )}
                            >
                              <WorldSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__zDSfK
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__a5YsA
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uzxqb
                                )}
                              >
                                {"Terms and Conditions"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </div>
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__otaPt
                        )}
                      >
                        <div
                          data-plasmic-name={"item5"}
                          data-plasmic-override={overrides.item5}
                          className={classNames(projectcss.all, sty.item5)}
                        >
                          <p.PlasmicLink
                            data-plasmic-name={"httpsapplexyomcomlogin6"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin6
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.httpsapplexyomcomlogin6
                            )}
                            component={Link}
                            href={"https://app.lexyom.com/login"}
                            platform={"nextjs"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__z7AQc
                              )}
                            >
                              <SignatureDocSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___6YRJi
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nnNrm
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__axp2N
                                )}
                              >
                                {"Term Sheet"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </div>

                        <div
                          data-plasmic-name={"item6"}
                          data-plasmic-override={overrides.item6}
                          className={classNames(projectcss.all, sty.item6)}
                        >
                          <p.PlasmicLink
                            data-plasmic-name={"httpsapplexyomcomlogin7"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin7
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.httpsapplexyomcomlogin7
                            )}
                            component={Link}
                            href={"https://app.lexyom.com/login"}
                            platform={"nextjs"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p2PXg
                              )}
                            >
                              <DealSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__x0Prf
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__doCb
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__okjQi
                                )}
                              >
                                {"Financing Documents"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </div>

                        <div
                          data-plasmic-name={"item7"}
                          data-plasmic-override={overrides.item7}
                          className={classNames(projectcss.all, sty.item7)}
                        >
                          <p.PlasmicLink
                            data-plasmic-name={"httpsapplexyomcomlogin5"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin5
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.httpsapplexyomcomlogin5
                            )}
                            component={Link}
                            href={"https://app.lexyom.com/login"}
                            platform={"nextjs"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kkn1T
                              )}
                            >
                              <CustomerServiceSvgrepoCom1SvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ixrTf
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qpOh3
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xv6Uf
                                )}
                              >
                                {"Legal Consultations"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </div>

                        <div
                          data-plasmic-name={"item8"}
                          data-plasmic-override={overrides.item8}
                          className={classNames(projectcss.all, sty.item8)}
                        >
                          <p.PlasmicLink
                            data-plasmic-name={"httpsapplexyomcomlogin4"}
                            data-plasmic-override={
                              overrides.httpsapplexyomcomlogin4
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.httpsapplexyomcomlogin4
                            )}
                            component={Link}
                            href={"https://app.lexyom.com/login"}
                            platform={"nextjs"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p8Fa7
                              )}
                            >
                              <MoreSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___55EA
                                )}
                                role={"img"}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__le9Sb
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___21GFa
                                )}
                              >
                                {"And more.."}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </div>
                      </div>
                    ) : null}
                  </div>
                </p.Stack>
              </div>
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__bfS6
              )}
              component={Link}
              href={"https://app.lexyom.com/login"}
              platform={"nextjs"}
            >
              <p.Stack
                as={"button"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.button__b2L27,
                  ""
                )}
              >
                {true ? (
                  <div
                    data-plasmic-name={"startIconContainer"}
                    data-plasmic-override={overrides.startIconContainer}
                    className={classNames(
                      projectcss.all,
                      sty.startIconContainer
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__ggSxq)}
                          role={"img"}
                        />
                      ),

                      value: args.startIcon,
                      className: classNames(sty.slotTargetStartIcon)
                    })}
                  </div>
                ) : null}

                <div
                  data-plasmic-name={"contentContainer"}
                  data-plasmic-override={overrides.contentContainer}
                  className={classNames(projectcss.all, sty.contentContainer)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Start for free",
                    value: args.children,
                    className: classNames(sty.slotTargetChildren)
                  })}
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"endIconContainer"}
                    data-plasmic-override={overrides.endIconContainer}
                    className={classNames(projectcss.all, sty.endIconContainer)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__oAkQ)}
                          role={"img"}
                        />
                      ),

                      value: args.endIcon,
                      className: classNames(sty.slotTargetEndIcon)
                    })}
                  </div>
                ) : null}
              </p.Stack>
            </p.PlasmicLink>
          </p.Stack>

          <div
            data-plasmic-name={"features"}
            data-plasmic-override={overrides.features}
            className={classNames(projectcss.all, sty.features)}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"logos"}
              data-plasmic-override={overrides.logos}
              hasGap={true}
              className={classNames(projectcss.all, sty.logos)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"logoContainer"}
                data-plasmic-override={overrides.logoContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.logoContainer)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__xUvw6)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lexyom_site_v_1/images/_500Png.png",
                    fullWidth: 900,
                    fullHeight: 900,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kz9Pa)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lexyom_site_v_1/images/faikpng.png",
                    fullWidth: 900,
                    fullHeight: 900,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__k5EL)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lexyom_site_v_1/images/hub71Png.png",
                    fullWidth: 900,
                    fullHeight: 900,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__bogft)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lexyom_site_v_1/images/mashreqpng.png",
                    fullWidth: 900,
                    fullHeight: 900,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__xvnYj)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lexyom_site_v_1/images/sandboxpng.png",
                    fullWidth: 900,
                    fullHeight: 900,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nqyNn)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lexyom_site_v_1/images/sbcpng.png",
                    fullWidth: 900,
                    fullHeight: 900,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qQdc9)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lexyom_site_v_1/images/wisepng.png",
                    fullWidth: 900,
                    fullHeight: 900,
                    aspectRatio: undefined
                  }}
                />
              </p.Stack>
            </p.Stack>

            <section
              data-plasmic-name={"computerScreenSection"}
              data-plasmic-override={overrides.computerScreenSection}
              className={classNames(projectcss.all, sty.computerScreenSection)}
            >
              <div
                data-plasmic-name={"twoSideBox"}
                data-plasmic-override={overrides.twoSideBox}
                className={classNames(projectcss.all, sty.twoSideBox)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pOsNb)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mTcMv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4No5
                          )}
                        >
                          {"Legal for every part of your business"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__di3Tz
                          )}
                        >
                          <Video
                            autoPlay={true}
                            className={classNames(
                              "__wab_instance",
                              sty.htmlVideo__rvoIj
                            )}
                            loop={true}
                            muted={true}
                            playsInline={true}
                            poster={
                              '"/plasmic/lexyom_site_v_1/images/macBookPro16Png.png"'
                            }
                            preload={"auto"}
                            src={
                              "https://firebasestorage.googleapis.com/v0/b/lexyom-site.appspot.com/o/lexyom_min_crop.mp4?alt=media&token=89a71ee7-400a-42a4-81b4-4674d40658bb"
                            }
                          />
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            </section>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___0EVp0
              )}
              component={Link}
              href={"https://app.lexyom.com/login"}
              platform={"nextjs"}
            >
              <p.Stack
                as={"button"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.button__fq7M,
                  ""
                )}
              >
                {true ? (
                  <div
                    data-plasmic-name={"startIconContainer2"}
                    data-plasmic-override={overrides.startIconContainer2}
                    className={classNames(
                      projectcss.all,
                      sty.startIconContainer2
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__j07Qi)}
                          role={"img"}
                        />
                      ),

                      value: args.startIcon2,
                      className: classNames(sty.slotTargetStartIcon2)
                    })}
                  </div>
                ) : null}

                <div
                  data-plasmic-name={"contentContainer2"}
                  data-plasmic-override={overrides.contentContainer2}
                  className={classNames(projectcss.all, sty.contentContainer2)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Start for free",
                    value: args.children2,
                    className: classNames(sty.slotTargetChildren2)
                  })}
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"endIconContainer2"}
                    data-plasmic-override={overrides.endIconContainer2}
                    className={classNames(
                      projectcss.all,
                      sty.endIconContainer2
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Icon3Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0VYGb
                          )}
                          role={"img"}
                        />
                      ),

                      value: args.endIcon2,
                      className: classNames(sty.slotTargetEndIcon2)
                    })}
                  </div>
                ) : null}
              </p.Stack>
            </p.PlasmicLink>

            <section
              data-plasmic-name={"signatureSection"}
              data-plasmic-override={overrides.signatureSection}
              className={classNames(projectcss.all, sty.signatureSection)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__nj64)}>
                <div className={classNames(projectcss.all, sty.columns__la8Yk)}>
                  <div className={classNames(projectcss.all, sty.column__fnoe)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vCdXd)}
                    >
                      <h2
                        data-plasmic-name={"testimonialText"}
                        data-plasmic-override={overrides.testimonialText}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.testimonialText
                        )}
                      >
                        {"The fastest way to create contracts!"}
                      </h2>

                      <p
                        data-plasmic-name={"position"}
                        data-plasmic-override={overrides.position}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.position
                        )}
                      >
                        {
                          "The fastest way to create contracts! Just log in to your dashboard, select the contract you are looking for from our exhaustive library, customize your contract to fit your needs, then send it over for digital signature. It's really that easy! "
                        }
                      </p>
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__ax89P)}
                  >
                    <Video
                      autoPlay={true}
                      className={classNames(
                        "__wab_instance",
                        sty.htmlVideo__qpQmd
                      )}
                      loop={true}
                      muted={true}
                      playsInline={false}
                      poster={
                        '"/plasmic/lexyom_site_v_1/images/screenshot45Png2.png"'
                      }
                      preload={"auto"}
                      src={
                        "https://firebasestorage.googleapis.com/v0/b/lexyom-site.appspot.com/o/signature.mp4?alt=media&token=32d2f329-184f-4822-b6c5-efd0a633ebf8"
                      }
                    />
                  </div>
                </div>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__a5P5M
                  )}
                  component={Link}
                  href={"https://app.lexyom.com/login"}
                  platform={"nextjs"}
                >
                  <p.Stack
                    as={"button"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      sty.button__wlqnF,
                      ""
                    )}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"startIconContainer3"}
                        data-plasmic-override={overrides.startIconContainer3}
                        className={classNames(
                          projectcss.all,
                          sty.startIconContainer3
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: (
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__u0XE
                              )}
                              role={"img"}
                            />
                          ),

                          value: args.startIcon3,
                          className: classNames(sty.slotTargetStartIcon3)
                        })}
                      </div>
                    ) : null}

                    <div
                      data-plasmic-name={"contentContainer3"}
                      data-plasmic-override={overrides.contentContainer3}
                      className={classNames(
                        projectcss.all,
                        sty.contentContainer3
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Get Started",
                        value: args.children3,
                        className: classNames(sty.slotTargetChildren3)
                      })}
                    </div>

                    {true ? (
                      <div
                        data-plasmic-name={"endIconContainer3"}
                        data-plasmic-override={overrides.endIconContainer3}
                        className={classNames(
                          projectcss.all,
                          sty.endIconContainer3
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: (
                            <Icon3Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___8D7Gq
                              )}
                              role={"img"}
                            />
                          ),

                          value: args.endIcon3,
                          className: classNames(sty.slotTargetEndIcon3)
                        })}
                      </div>
                    ) : null}
                  </p.Stack>
                </p.PlasmicLink>
              </div>
            </section>

            <section
              data-plasmic-name={"youTooCanLearnVideo"}
              data-plasmic-override={overrides.youTooCanLearnVideo}
              className={classNames(projectcss.all, sty.youTooCanLearnVideo)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zlZxC)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__faeHp)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__xPetL)}
                  >
                    <YouTube
                      className={classNames(
                        "__wab_instance",
                        sty.youTube__vIb0U
                      )}
                      controls={false}
                      modestbranding={false}
                      videoId={"Q9MYaTr3fDY"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__baw7V)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__g1Z80)}
                    >
                      <h2
                        data-plasmic-name={"testimonialText2"}
                        data-plasmic-override={overrides.testimonialText2}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.testimonialText2
                        )}
                      >
                        {"Legal in your pocket! "}
                      </h2>

                      <p
                        data-plasmic-name={"position2"}
                        data-plasmic-override={overrides.position2}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.position2
                        )}
                      >
                        {
                          "Lexyom Academy's mission is to transform the way companies scale by offering unique carefully curated insight on different legal and business topics.  From quick, practical courses covering everything from Share Vesting to ESOP and much more, to comprehensive certifications, you’ll learn everything you need to know about cutting-edge business and legal topics."
                        }
                      </p>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__tfRkI
                        )}
                        color={"red"}
                        link={"https://app.lexyom.com/login"}
                        shape={"rounded"}
                        showEndIcon={true}
                      />
                    </div>
                  </div>
                </p.Stack>
              </div>
            </section>

            <section
              data-plasmic-name={"generateFastVideo"}
              data-plasmic-override={overrides.generateFastVideo}
              className={classNames(projectcss.all, sty.generateFastVideo)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uhweH)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns___2YsSq)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__mMaXw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0MUqC
                      )}
                    >
                      <h2
                        data-plasmic-name={"testimonialText3"}
                        data-plasmic-override={overrides.testimonialText3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.testimonialText3
                        )}
                      >
                        {"Success stories: Lexyom changed the way we do Legal!"}
                      </h2>

                      <p
                        data-plasmic-name={"position3"}
                        data-plasmic-override={overrides.position3}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.position3
                        )}
                      >
                        {
                          "Used and loved by many entrepreneurs who turned to Lexyom to centralize everything related to Legal in one place. The dashboard literally allows you to keep tabs on all your legal in one place. The very best part of it all is that it even looks like something you would actually use!"
                        }
                      </p>
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__alWo4
                      )}
                      color={"red"}
                      link={"https://app.lexyom.com/login"}
                      shape={"rounded"}
                      showEndIcon={true}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__oVb0L)}
                  >
                    <YouTube
                      className={classNames(
                        "__wab_instance",
                        sty.youTube__o02Po
                      )}
                      controls={false}
                      modestbranding={false}
                      videoId={"ErzIJprytxk"}
                    />
                  </div>
                </p.Stack>
              </div>
            </section>
          </div>

          <div
            data-plasmic-name={"verbatimsDark"}
            data-plasmic-override={overrides.verbatimsDark}
            className={classNames(projectcss.all, sty.verbatimsDark)}
          >
            <h2
              data-plasmic-name={"testimonialText5"}
              data-plasmic-override={overrides.testimonialText5}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.testimonialText5
              )}
            >
              {"Calling all exceptional entrepreneurs!"}
            </h2>

            <section
              data-plasmic-name={"verbatims"}
              data-plasmic-override={overrides.verbatims}
              className={classNames(projectcss.all, sty.verbatims)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9E4Tw)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xNHz2)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nfkOq)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__yr9Jx)}
                    >
                      <div
                        data-plasmic-name={"client5"}
                        data-plasmic-override={overrides.client5}
                        className={classNames(projectcss.all, sty.client5)}
                      >
                        <div
                          data-plasmic-name={"clientList5"}
                          data-plasmic-override={overrides.clientList5}
                          className={classNames(
                            projectcss.all,
                            sty.clientList5
                          )}
                        >
                          <div
                            data-plasmic-name={"indivClient5"}
                            data-plasmic-override={overrides.indivClient5}
                            className={classNames(
                              projectcss.all,
                              sty.indivClient5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lv2Ol
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__trpun)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "auto"
                                    : "100%"
                                }
                                displayMaxHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "200px"
                                    : "none"
                                }
                                displayMaxWidth={"100%"}
                                displayMinHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "300px"
                                    : "0"
                                }
                                displayMinWidth={"0"}
                                displayWidth={"auto"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/lexyom_site_v_1/images/priscillaEloraSharuk960X1330Crop1Jpeg.jpeg",
                                  fullWidth: 960,
                                  fullHeight: 1330,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fNCs5
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jsnJl
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lmDl6
                                  )}
                                >
                                  {
                                    "\" We've worked with Lexyom on several levels including agreements, corporate structure, and Cybersecurity legal matters. They've been amazing at tackling all legal  hurdles and pushing us towards scalability"
                                  }
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mjjCl
                                  )}
                                >
                                  {"-- Priscilla Elora"}
                                </div>

                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__dEayu)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"40%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/lexyom_site_v_1/images/mykiLogopng.png",
                                    fullWidth: 562,
                                    fullHeight: 152,
                                    aspectRatio: undefined
                                  }}
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"client7"}
                        data-plasmic-override={overrides.client7}
                        className={classNames(projectcss.all, sty.client7)}
                      >
                        <div
                          data-plasmic-name={"clientList7"}
                          data-plasmic-override={overrides.clientList7}
                          className={classNames(
                            projectcss.all,
                            sty.clientList7
                          )}
                        >
                          <div
                            data-plasmic-name={"indivClient7"}
                            data-plasmic-override={overrides.indivClient7}
                            className={classNames(
                              projectcss.all,
                              sty.indivClient7
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zxUMr
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__scj4Z)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "auto"
                                    : "100%"
                                }
                                displayMaxHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "200px"
                                    : "none"
                                }
                                displayMaxWidth={"100%"}
                                displayMinHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "300px"
                                    : "0"
                                }
                                displayMinWidth={"0"}
                                displayWidth={"auto"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/lexyom_site_v_1/images/img20180914125315Width1360Jpg.jpeg",
                                  fullWidth: 1360,
                                  fullHeight: 1780,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6N4IO
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__usX0G
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t9HRb
                                  )}
                                >
                                  {
                                    "\" We started with Lexyom from the start with our co-founder agreement, then with our company registration. We've even used Lexyom for our corporate structuring and our investment negotiations and closing with VCs & Deutsche Telecom. Lexyom was also a great tool for us to get our operational agreement. To cut to the chase, we think the product is amazing!"
                                  }
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yX9ZS
                                  )}
                                >
                                  {"-- Firas Khalife"}
                                </div>

                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__fyhVe)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"40%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/lexyom_site_v_1/images/logoDarksvg.svg",
                                    fullWidth: 263,
                                    fullHeight: 150,
                                    aspectRatio: 1.752294
                                  }}
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </p.Stack>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__fsDvm
                        )}
                      >
                        <div
                          data-plasmic-name={"client"}
                          data-plasmic-override={overrides.client}
                          className={classNames(projectcss.all, sty.client)}
                        >
                          <div
                            data-plasmic-name={"clientList"}
                            data-plasmic-override={overrides.clientList}
                            className={classNames(
                              projectcss.all,
                              sty.clientList
                            )}
                          >
                            <div
                              data-plasmic-name={"indivClient"}
                              data-plasmic-override={overrides.indivClient}
                              className={classNames(
                                projectcss.all,
                                sty.indivClient
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vwIyh
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__wv6Z)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "auto"
                                      : "100%"
                                  }
                                  displayMaxHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "200px"
                                      : "none"
                                  }
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/lexyom_site_v_1/images/priscillaEloraSharuk960X1330Crop1Jpeg.jpeg",
                                    fullWidth: 960,
                                    fullHeight: 1330,
                                    aspectRatio: undefined
                                  }}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__p30Kl
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jQkev
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__btDQf
                                    )}
                                  >
                                    {
                                      "\" We've worked with Lexyom on several levels including agreements, corporate structure, and Cybersecurity legal matters. They've been amazing at tackling all legal  hurdles and pushing us towards scalability"
                                    }
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4Lv9O
                                    )}
                                  >
                                    {"-- Priscilla Elora"}
                                  </div>

                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__gFnJh)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"40%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/lexyom_site_v_1/images/mykiLogopng.png",
                                      fullWidth: 562,
                                      fullHeight: 152,
                                      aspectRatio: undefined
                                    }}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"client3"}
                          data-plasmic-override={overrides.client3}
                          className={classNames(projectcss.all, sty.client3)}
                        >
                          <div
                            data-plasmic-name={"clientList2"}
                            data-plasmic-override={overrides.clientList2}
                            className={classNames(
                              projectcss.all,
                              sty.clientList2
                            )}
                          >
                            <div
                              data-plasmic-name={"indivClient2"}
                              data-plasmic-override={overrides.indivClient2}
                              className={classNames(
                                projectcss.all,
                                sty.indivClient2
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2G0Pp
                                )}
                              >
                                {true ? (
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__m5Ryc)}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "auto"
                                        : "100%"
                                    }
                                    displayMaxHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "200px"
                                        : "300px"
                                    }
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/lexyom_site_v_1/images/img20180914125315Width1360Jpg.jpeg",
                                      fullWidth: 1360,
                                      fullHeight: 1780,
                                      aspectRatio: undefined
                                    }}
                                  />
                                ) : null}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vfwsQ
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yR8Qa
                                    )}
                                  >
                                    {"Design"}
                                  </div>
                                ) : null}

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wxmHz
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__hk9Kl
                                    )}
                                  >
                                    {
                                      "\" We started with Lexyom from the start with our co-founder agreement, then with our company registration. We've even used Lexyom for our corporate structuring and our investment negotiations and closing with VCs & Deutsche Telecom. Lexyom was also a great tool for us to get our operational agreement. To cut to the chase, we think the product is amazing!"
                                    }
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gyvFb
                                    )}
                                  >
                                    {"-- Firas Khalife"}
                                  </div>

                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__eBEgM)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"40%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/lexyom_site_v_1/images/logoDarksvg.svg",
                                      fullWidth: 263,
                                      fullHeight: 150,
                                      aspectRatio: 1.752294
                                    }}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tHv4Z)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__csb8F)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bqt9C)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns___1KJkD
                        )}
                      >
                        <div
                          data-plasmic-name={"client4"}
                          data-plasmic-override={overrides.client4}
                          className={classNames(projectcss.all, sty.client4)}
                        >
                          <div
                            data-plasmic-name={"clientList4"}
                            data-plasmic-override={overrides.clientList4}
                            className={classNames(
                              projectcss.all,
                              sty.clientList4
                            )}
                          >
                            <div
                              data-plasmic-name={"indivClient4"}
                              data-plasmic-override={overrides.indivClient4}
                              className={classNames(
                                projectcss.all,
                                sty.indivClient4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__inMj7
                                )}
                              >
                                {true ? (
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__hfZW)}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "auto"
                                        : "100%"
                                    }
                                    displayMaxHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "200px"
                                        : "300px"
                                    }
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/lexyom_site_v_1/images/shutterstock6489070241Jpg.jpeg",
                                      fullWidth: 194,
                                      fullHeight: 194,
                                      aspectRatio: undefined
                                    }}
                                  />
                                ) : null}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vcUbK
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cuVCc
                                    )}
                                  >
                                    {"Design"}
                                  </div>
                                ) : null}

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__m12N
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__b4KsZ
                                    )}
                                  >
                                    {
                                      "“When the pandemic hit, those of us who thrive on in-person collaboration were worried that our creativity and productivity would suffer. Miro was the perfect tool to help us with collaboration, whiteboarding, and retrospectives while remote.”"
                                    }
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__utitg
                                    )}
                                  >
                                    {"-- Person name"}
                                  </div>

                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__tbkQ0)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"40%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/lexyom_site_v_1/images/image9.svg",
                                      fullWidth: 152.999,
                                      fullHeight: 87,
                                      aspectRatio: 1.758621
                                    }}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"client2"}
                          data-plasmic-override={overrides.client2}
                          className={classNames(projectcss.all, sty.client2)}
                        >
                          <div
                            data-plasmic-name={"clientList3"}
                            data-plasmic-override={overrides.clientList3}
                            className={classNames(
                              projectcss.all,
                              sty.clientList3
                            )}
                          >
                            <div
                              data-plasmic-name={"indivClient3"}
                              data-plasmic-override={overrides.indivClient3}
                              className={classNames(
                                projectcss.all,
                                sty.indivClient3
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qz3F3
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__nEcmh)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "auto"
                                      : "100%"
                                  }
                                  displayMaxHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "200px"
                                      : "none"
                                  }
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/lexyom_site_v_1/images/shutterstock6489070241Jpg.jpeg",
                                    fullWidth: 194,
                                    fullHeight: 194,
                                    aspectRatio: undefined
                                  }}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__c6LJe
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__m9Skn
                                    )}
                                  >
                                    {"Design"}
                                  </div>
                                ) : null}

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ynz5R
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kCu9H
                                    )}
                                  >
                                    {
                                      "“When the pandemic hit, those of us who thrive on in-person collaboration were worried that our creativity and productivity would suffer. Miro was the perfect tool to help us with collaboration, whiteboarding, and retrospectives while remote.”"
                                    }
                                  </div>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ngLq1
                                    )}
                                  >
                                    {"-- Person name"}
                                  </div>

                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img___5EpT)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"40%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/lexyom_site_v_1/images/image9.svg",
                                      fullWidth: 152.999,
                                      fullHeight: 87,
                                      aspectRatio: 1.758621
                                    }}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </section>
          </div>

          <div
            data-plasmic-name={"restOfSite"}
            data-plasmic-override={overrides.restOfSite}
            className={classNames(projectcss.all, sty.restOfSite)}
          >
            {true ? (
              <section
                data-plasmic-name={"lastFeature"}
                data-plasmic-override={overrides.lastFeature}
                className={classNames(projectcss.all, sty.lastFeature)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__h8XKw)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__opZg7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__uYuAc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bNgO1
                        )}
                      >
                        <h2
                          data-plasmic-name={"testimonialText4"}
                          data-plasmic-override={overrides.testimonialText4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.testimonialText4
                          )}
                        >
                          {"asdf"}
                        </h2>

                        <p
                          data-plasmic-name={"position4"}
                          data-plasmic-override={overrides.position4}
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.position4
                          )}
                        >
                          {"more infoasdfasd fasdfasd fasdfas dfasdf"}
                        </p>
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column___5T9I)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__xf9So)}
                        displayHeight={"auto"}
                        displayMaxHeight={"400px"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/lexyom_site_v_1/images/screenshot42Png.png",
                          fullWidth: 1630,
                          fullHeight: 1321,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </p.Stack>
                </div>
              </section>
            ) : null}

            <GetStartedButtons
              data-plasmic-name={"getStartedButtons"}
              data-plasmic-override={overrides.getStartedButtons}
              className={classNames("__wab_instance", sty.getStartedButtons)}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root2: [
    "root2",
    "navBar",
    "hero",
    "h1",
    "whatWeDoStack",
    "whatWeDo",
    "item",
    "httpsapplexyomcomlogin8",
    "item2",
    "httpsapplexyomcomlogin2",
    "item3",
    "httpsapplexyomcomlogin",
    "item4",
    "httpsapplexyomcomlogin3",
    "item5",
    "httpsapplexyomcomlogin6",
    "item6",
    "httpsapplexyomcomlogin7",
    "item7",
    "httpsapplexyomcomlogin5",
    "item8",
    "httpsapplexyomcomlogin4",
    "startIconContainer",
    "contentContainer",
    "endIconContainer",
    "features",
    "logos",
    "logoContainer",
    "computerScreenSection",
    "twoSideBox",
    "startIconContainer2",
    "contentContainer2",
    "endIconContainer2",
    "signatureSection",
    "testimonialText",
    "position",
    "startIconContainer3",
    "contentContainer3",
    "endIconContainer3",
    "youTooCanLearnVideo",
    "testimonialText2",
    "position2",
    "generateFastVideo",
    "testimonialText3",
    "position3",
    "verbatimsDark",
    "testimonialText5",
    "verbatims",
    "client5",
    "clientList5",
    "indivClient5",
    "client7",
    "clientList7",
    "indivClient7",
    "client",
    "clientList",
    "indivClient",
    "client3",
    "clientList2",
    "indivClient2",
    "client4",
    "clientList4",
    "indivClient4",
    "client2",
    "clientList3",
    "indivClient3",
    "restOfSite",
    "lastFeature",
    "testimonialText4",
    "position4",
    "getStartedButtons",
    "footer"
  ],

  navBar: ["navBar"],
  hero: [
    "hero",
    "h1",
    "whatWeDoStack",
    "whatWeDo",
    "item",
    "httpsapplexyomcomlogin8",
    "item2",
    "httpsapplexyomcomlogin2",
    "item3",
    "httpsapplexyomcomlogin",
    "item4",
    "httpsapplexyomcomlogin3",
    "item5",
    "httpsapplexyomcomlogin6",
    "item6",
    "httpsapplexyomcomlogin7",
    "item7",
    "httpsapplexyomcomlogin5",
    "item8",
    "httpsapplexyomcomlogin4",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],

  h1: ["h1"],
  whatWeDoStack: [
    "whatWeDoStack",
    "whatWeDo",
    "item",
    "httpsapplexyomcomlogin8",
    "item2",
    "httpsapplexyomcomlogin2",
    "item3",
    "httpsapplexyomcomlogin",
    "item4",
    "httpsapplexyomcomlogin3",
    "item5",
    "httpsapplexyomcomlogin6",
    "item6",
    "httpsapplexyomcomlogin7",
    "item7",
    "httpsapplexyomcomlogin5",
    "item8",
    "httpsapplexyomcomlogin4"
  ],

  whatWeDo: [
    "whatWeDo",
    "item",
    "httpsapplexyomcomlogin8",
    "item2",
    "httpsapplexyomcomlogin2",
    "item3",
    "httpsapplexyomcomlogin",
    "item4",
    "httpsapplexyomcomlogin3",
    "item5",
    "httpsapplexyomcomlogin6",
    "item6",
    "httpsapplexyomcomlogin7",
    "item7",
    "httpsapplexyomcomlogin5",
    "item8",
    "httpsapplexyomcomlogin4"
  ],

  item: ["item", "httpsapplexyomcomlogin8"],
  httpsapplexyomcomlogin8: ["httpsapplexyomcomlogin8"],
  item2: ["item2", "httpsapplexyomcomlogin2"],
  httpsapplexyomcomlogin2: ["httpsapplexyomcomlogin2"],
  item3: ["item3", "httpsapplexyomcomlogin"],
  httpsapplexyomcomlogin: ["httpsapplexyomcomlogin"],
  item4: ["item4", "httpsapplexyomcomlogin3"],
  httpsapplexyomcomlogin3: ["httpsapplexyomcomlogin3"],
  item5: ["item5", "httpsapplexyomcomlogin6"],
  httpsapplexyomcomlogin6: ["httpsapplexyomcomlogin6"],
  item6: ["item6", "httpsapplexyomcomlogin7"],
  httpsapplexyomcomlogin7: ["httpsapplexyomcomlogin7"],
  item7: ["item7", "httpsapplexyomcomlogin5"],
  httpsapplexyomcomlogin5: ["httpsapplexyomcomlogin5"],
  item8: ["item8", "httpsapplexyomcomlogin4"],
  httpsapplexyomcomlogin4: ["httpsapplexyomcomlogin4"],
  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer"],
  endIconContainer: ["endIconContainer"],
  features: [
    "features",
    "logos",
    "logoContainer",
    "computerScreenSection",
    "twoSideBox",
    "startIconContainer2",
    "contentContainer2",
    "endIconContainer2",
    "signatureSection",
    "testimonialText",
    "position",
    "startIconContainer3",
    "contentContainer3",
    "endIconContainer3",
    "youTooCanLearnVideo",
    "testimonialText2",
    "position2",
    "generateFastVideo",
    "testimonialText3",
    "position3"
  ],

  logos: ["logos", "logoContainer"],
  logoContainer: ["logoContainer"],
  computerScreenSection: ["computerScreenSection", "twoSideBox"],
  twoSideBox: ["twoSideBox"],
  startIconContainer2: ["startIconContainer2"],
  contentContainer2: ["contentContainer2"],
  endIconContainer2: ["endIconContainer2"],
  signatureSection: [
    "signatureSection",
    "testimonialText",
    "position",
    "startIconContainer3",
    "contentContainer3",
    "endIconContainer3"
  ],

  testimonialText: ["testimonialText"],
  position: ["position"],
  startIconContainer3: ["startIconContainer3"],
  contentContainer3: ["contentContainer3"],
  endIconContainer3: ["endIconContainer3"],
  youTooCanLearnVideo: ["youTooCanLearnVideo", "testimonialText2", "position2"],
  testimonialText2: ["testimonialText2"],
  position2: ["position2"],
  generateFastVideo: ["generateFastVideo", "testimonialText3", "position3"],
  testimonialText3: ["testimonialText3"],
  position3: ["position3"],
  verbatimsDark: [
    "verbatimsDark",
    "testimonialText5",
    "verbatims",
    "client5",
    "clientList5",
    "indivClient5",
    "client7",
    "clientList7",
    "indivClient7",
    "client",
    "clientList",
    "indivClient",
    "client3",
    "clientList2",
    "indivClient2",
    "client4",
    "clientList4",
    "indivClient4",
    "client2",
    "clientList3",
    "indivClient3"
  ],

  testimonialText5: ["testimonialText5"],
  verbatims: [
    "verbatims",
    "client5",
    "clientList5",
    "indivClient5",
    "client7",
    "clientList7",
    "indivClient7",
    "client",
    "clientList",
    "indivClient",
    "client3",
    "clientList2",
    "indivClient2",
    "client4",
    "clientList4",
    "indivClient4",
    "client2",
    "clientList3",
    "indivClient3"
  ],

  client5: ["client5", "clientList5", "indivClient5"],
  clientList5: ["clientList5", "indivClient5"],
  indivClient5: ["indivClient5"],
  client7: ["client7", "clientList7", "indivClient7"],
  clientList7: ["clientList7", "indivClient7"],
  indivClient7: ["indivClient7"],
  client: ["client", "clientList", "indivClient"],
  clientList: ["clientList", "indivClient"],
  indivClient: ["indivClient"],
  client3: ["client3", "clientList2", "indivClient2"],
  clientList2: ["clientList2", "indivClient2"],
  indivClient2: ["indivClient2"],
  client4: ["client4", "clientList4", "indivClient4"],
  clientList4: ["clientList4", "indivClient4"],
  indivClient4: ["indivClient4"],
  client2: ["client2", "clientList3", "indivClient3"],
  clientList3: ["clientList3", "indivClient3"],
  indivClient3: ["indivClient3"],
  restOfSite: [
    "restOfSite",
    "lastFeature",
    "testimonialText4",
    "position4",
    "getStartedButtons",
    "footer"
  ],

  lastFeature: ["lastFeature", "testimonialText4", "position4"],
  testimonialText4: ["testimonialText4"],
  position4: ["position4"],
  getStartedButtons: ["getStartedButtons"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    hero: makeNodeComponent("hero"),
    h1: makeNodeComponent("h1"),
    whatWeDoStack: makeNodeComponent("whatWeDoStack"),
    whatWeDo: makeNodeComponent("whatWeDo"),
    item: makeNodeComponent("item"),
    httpsapplexyomcomlogin8: makeNodeComponent("httpsapplexyomcomlogin8"),
    item2: makeNodeComponent("item2"),
    httpsapplexyomcomlogin2: makeNodeComponent("httpsapplexyomcomlogin2"),
    item3: makeNodeComponent("item3"),
    httpsapplexyomcomlogin: makeNodeComponent("httpsapplexyomcomlogin"),
    item4: makeNodeComponent("item4"),
    httpsapplexyomcomlogin3: makeNodeComponent("httpsapplexyomcomlogin3"),
    item5: makeNodeComponent("item5"),
    httpsapplexyomcomlogin6: makeNodeComponent("httpsapplexyomcomlogin6"),
    item6: makeNodeComponent("item6"),
    httpsapplexyomcomlogin7: makeNodeComponent("httpsapplexyomcomlogin7"),
    item7: makeNodeComponent("item7"),
    httpsapplexyomcomlogin5: makeNodeComponent("httpsapplexyomcomlogin5"),
    item8: makeNodeComponent("item8"),
    httpsapplexyomcomlogin4: makeNodeComponent("httpsapplexyomcomlogin4"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),
    features: makeNodeComponent("features"),
    logos: makeNodeComponent("logos"),
    logoContainer: makeNodeComponent("logoContainer"),
    computerScreenSection: makeNodeComponent("computerScreenSection"),
    twoSideBox: makeNodeComponent("twoSideBox"),
    startIconContainer2: makeNodeComponent("startIconContainer2"),
    contentContainer2: makeNodeComponent("contentContainer2"),
    endIconContainer2: makeNodeComponent("endIconContainer2"),
    signatureSection: makeNodeComponent("signatureSection"),
    testimonialText: makeNodeComponent("testimonialText"),
    position: makeNodeComponent("position"),
    startIconContainer3: makeNodeComponent("startIconContainer3"),
    contentContainer3: makeNodeComponent("contentContainer3"),
    endIconContainer3: makeNodeComponent("endIconContainer3"),
    youTooCanLearnVideo: makeNodeComponent("youTooCanLearnVideo"),
    testimonialText2: makeNodeComponent("testimonialText2"),
    position2: makeNodeComponent("position2"),
    generateFastVideo: makeNodeComponent("generateFastVideo"),
    testimonialText3: makeNodeComponent("testimonialText3"),
    position3: makeNodeComponent("position3"),
    verbatimsDark: makeNodeComponent("verbatimsDark"),
    testimonialText5: makeNodeComponent("testimonialText5"),
    verbatims: makeNodeComponent("verbatims"),
    client5: makeNodeComponent("client5"),
    clientList5: makeNodeComponent("clientList5"),
    indivClient5: makeNodeComponent("indivClient5"),
    client7: makeNodeComponent("client7"),
    clientList7: makeNodeComponent("clientList7"),
    indivClient7: makeNodeComponent("indivClient7"),
    client: makeNodeComponent("client"),
    clientList: makeNodeComponent("clientList"),
    indivClient: makeNodeComponent("indivClient"),
    client3: makeNodeComponent("client3"),
    clientList2: makeNodeComponent("clientList2"),
    indivClient2: makeNodeComponent("indivClient2"),
    client4: makeNodeComponent("client4"),
    clientList4: makeNodeComponent("clientList4"),
    indivClient4: makeNodeComponent("indivClient4"),
    client2: makeNodeComponent("client2"),
    clientList3: makeNodeComponent("clientList3"),
    indivClient3: makeNodeComponent("indivClient3"),
    restOfSite: makeNodeComponent("restOfSite"),
    lastFeature: makeNodeComponent("lastFeature"),
    testimonialText4: makeNodeComponent("testimonialText4"),
    position4: makeNodeComponent("position4"),
    getStartedButtons: makeNodeComponent("getStartedButtons"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
