// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3Qa6q3s1gm91eHXRuPwyBY
// Component: nQ2jjWsYJM
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsglmAo6RxnuGek } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GlmAO6RxnuGek/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_lexyom_site_v_1.module.css"; // plasmic-import: 3Qa6q3s1gm91eHXRuPwyBY/projectcss
import sty from "./PlasmicClientVerbatim.module.css"; // plasmic-import: nQ2jjWsYJM/css

export const PlasmicClientVerbatim__VariantProps = new Array();

export const PlasmicClientVerbatim__ArgProps = new Array();

function PlasmicClientVerbatim__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsglmAo6RxnuGek()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__g2Pt1)}>
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "250px"
              : "500px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"auto"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "250px"
              : "100%"
          }
          link={"/Agents-single"}
          loading={"lazy"}
          src={{
            src: "/plasmic/lexyom_site_v_1/images/image23.png",
            fullWidth: 1287,
            fullHeight: 1931,
            aspectRatio: undefined
          }}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___9PsCd)}
        >
          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4
            )}
          >
            {"Priscilla blah, Company name"}
          </h4>

          <div className={classNames(projectcss.all, sty.freeBox__fIju7)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, "
              }
            </div>
          </div>
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "h4", "text"],
  img: ["img"],
  h4: ["h4"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicClientVerbatim__ArgProps,
      internalVariantPropNames: PlasmicClientVerbatim__VariantProps
    });

    return PlasmicClientVerbatim__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClientVerbatim";
  } else {
    func.displayName = `PlasmicClientVerbatim.${nodeName}`;
  }
  return func;
}

export const PlasmicClientVerbatim = Object.assign(
  // Top-level PlasmicClientVerbatim renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h4: makeNodeComponent("h4"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicClientVerbatim
    internalVariantProps: PlasmicClientVerbatim__VariantProps,
    internalArgProps: PlasmicClientVerbatim__ArgProps
  }
);

export default PlasmicClientVerbatim;
/* prettier-ignore-end */
