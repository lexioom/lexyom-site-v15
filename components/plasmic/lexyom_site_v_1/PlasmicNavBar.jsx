// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3Qa6q3s1gm91eHXRuPwyBY
// Component: c0t49AwPo7
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: uRieLqDvAv/component
import { useScreenVariants as useScreenVariantsglmAo6RxnuGek } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GlmAO6RxnuGek/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_lexyom_site_v_1.module.css"; // plasmic-import: 3Qa6q3s1gm91eHXRuPwyBY/projectcss
import sty from "./PlasmicNavBar.module.css"; // plasmic-import: c0t49AwPo7/css

export const PlasmicNavBar__VariantProps = new Array();

export const PlasmicNavBar__ArgProps = new Array();

function PlasmicNavBar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsglmAo6RxnuGek()
  });

  return (
    <header
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___228OW)}
      >
        <p.PlasmicLink
          data-plasmic-name={"logoWrap"}
          data-plasmic-override={overrides.logoWrap}
          className={classNames(projectcss.all, projectcss.a, sty.logoWrap)}
          component={Link}
          href={"/"}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            alt={""}
            className={classNames(sty.logo)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100px"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"1.5em"}
            loading={"lazy"}
            src={{
              src: "/plasmic/lexyom_site_v_1/images/logopng.png",
              fullWidth: 70,
              fullHeight: 70,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <NavLink
            className={classNames("__wab_instance", sty.navLink__rQ96O)}
            navDestination={"/our-story"}
          />
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <NavLink className={classNames("__wab_instance", sty.navLink__oWjSz)}>
            {"legal news"}
          </NavLink>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <NavLink
            className={classNames("__wab_instance", sty.navLink__tIyeM)}
            navDestination={"/pricing"}
          >
            {"Pricing"}
          </NavLink>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <NavLink
            className={classNames("__wab_instance", sty.navLink__z0CMj)}
            navDestination={"/limited-time-offer"}
          >
            {"unlimited legal"}
          </NavLink>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <NavLink
            className={classNames("__wab_instance", sty.navLink__a1I3Y)}
            navDestination={"https://legalnews.lexyom.com/"}
          >
            {"legal news"}
          </NavLink>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox___1JQ4)}>
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link
            )}
            component={Link}
            href={"https://app.lexyom.com/login"}
            platform={"nextjs"}
            target={undefined}
          >
            {"my dashboard"}
          </p.PlasmicLink>
        </div>
      </p.Stack>
    </header>
  );
}

const PlasmicDescendants = {
  root: ["root", "logoWrap", "logo", "link"],
  logoWrap: ["logoWrap", "logo"],
  logo: ["logo"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps
    });

    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoWrap: makeNodeComponent("logoWrap"),
    logo: makeNodeComponent("logo"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
