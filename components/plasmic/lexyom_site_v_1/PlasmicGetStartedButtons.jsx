// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3Qa6q3s1gm91eHXRuPwyBY
// Component: 6aSq1B1u45
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsglmAo6RxnuGek } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GlmAO6RxnuGek/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_lexyom_site_v_1.module.css"; // plasmic-import: 3Qa6q3s1gm91eHXRuPwyBY/projectcss
import sty from "./PlasmicGetStartedButtons.module.css"; // plasmic-import: 6aSq1B1u45/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: cZ4A75xhOp2J/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: aLWinbrsfkwl/icon

export const PlasmicGetStartedButtons__VariantProps = new Array();

export const PlasmicGetStartedButtons__ArgProps = new Array(
  "startIcon3",
  "children3",
  "endIcon3"
);

function PlasmicGetStartedButtons__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsglmAo6RxnuGek()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__h9Xmz)}>
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          {"Flip your Legal around today"}
        </h2>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___4IdWj)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lt85F)}
        >
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={"https://app.lexyom.com/login"}
            platform={"nextjs"}
          >
            <p.Stack
              as={"button"}
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.button,
                ""
              )}
            >
              {true ? (
                <div
                  data-plasmic-name={"startIconContainer3"}
                  data-plasmic-override={overrides.startIconContainer3}
                  className={classNames(
                    projectcss.all,
                    sty.startIconContainer3
                  )}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__rGfzl)}
                        role={"img"}
                      />
                    ),

                    value: args.startIcon3,
                    className: classNames(sty.slotTargetStartIcon3)
                  })}
                </div>
              ) : null}

              <div
                data-plasmic-name={"contentContainer3"}
                data-plasmic-override={overrides.contentContainer3}
                className={classNames(projectcss.all, sty.contentContainer3)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Start for free",
                  value: args.children3,
                  className: classNames(sty.slotTargetChildren3)
                })}
              </div>

              {true ? (
                <div
                  data-plasmic-name={"endIconContainer3"}
                  data-plasmic-override={overrides.endIconContainer3}
                  className={classNames(projectcss.all, sty.endIconContainer3)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__zzo1M)}
                        role={"img"}
                      />
                    ),

                    value: args.endIcon3,
                    className: classNames(sty.slotTargetEndIcon3)
                  })}
                </div>
              ) : null}
            </p.Stack>
          </p.PlasmicLink>
        </p.Stack>
      </div>
    </section>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "link",
    "button",
    "startIconContainer3",
    "contentContainer3",
    "endIconContainer3"
  ],

  h2: ["h2"],
  link: [
    "link",
    "button",
    "startIconContainer3",
    "contentContainer3",
    "endIconContainer3"
  ],

  button: [
    "button",
    "startIconContainer3",
    "contentContainer3",
    "endIconContainer3"
  ],

  startIconContainer3: ["startIconContainer3"],
  contentContainer3: ["contentContainer3"],
  endIconContainer3: ["endIconContainer3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGetStartedButtons__ArgProps,
      internalVariantPropNames: PlasmicGetStartedButtons__VariantProps
    });

    return PlasmicGetStartedButtons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGetStartedButtons";
  } else {
    func.displayName = `PlasmicGetStartedButtons.${nodeName}`;
  }
  return func;
}

export const PlasmicGetStartedButtons = Object.assign(
  // Top-level PlasmicGetStartedButtons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    startIconContainer3: makeNodeComponent("startIconContainer3"),
    contentContainer3: makeNodeComponent("contentContainer3"),
    endIconContainer3: makeNodeComponent("endIconContainer3"),
    // Metadata about props expected for PlasmicGetStartedButtons
    internalVariantProps: PlasmicGetStartedButtons__VariantProps,
    internalArgProps: PlasmicGetStartedButtons__ArgProps
  }
);

export default PlasmicGetStartedButtons;
/* prettier-ignore-end */
