// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3Qa6q3s1gm91eHXRuPwyBY
// Component: 6OgPDSshso
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_lexyom_site_v_1.module.css"; // plasmic-import: 3Qa6q3s1gm91eHXRuPwyBY/projectcss
import sty from "./PlasmicCs.module.css"; // plasmic-import: 6OgPDSshso/css

export const PlasmicCs__VariantProps = new Array();

export const PlasmicCs__ArgProps = new Array();

function PlasmicCs__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.p,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <React.Fragment>
        <React.Fragment>
          {" Are you making moves for something "}
        </React.Fragment>
        <span
          className={"plasmic_default__all plasmic_default__span"}
          style={{ fontWeight: 700 }}
        >
          {"big and new"}
        </span>
        <React.Fragment>
          {
            " for your business?\n\nDo you feel constantly freaked out that you're messing up "
          }
        </React.Fragment>
        <span
          className={"plasmic_default__all plasmic_default__span"}
          style={{ fontWeight: 700 }}
        >
          {"something you don't even know about"}
        </span>
        <React.Fragment>
          {"?\n\nFind yourself often crossing your fingers and "}
        </React.Fragment>
        <span
          className={"plasmic_default__all plasmic_default__span"}
          style={{ fontWeight: 700 }}
        >
          {"hoping that contract"}
        </span>
        <React.Fragment>
          {" you 'googled' will hold up in a court?\n"}
        </React.Fragment>
      </React.Fragment>
    </p>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCs__ArgProps,
      internalVariantPropNames: PlasmicCs__VariantProps
    });

    return PlasmicCs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCs";
  } else {
    func.displayName = `PlasmicCs.${nodeName}`;
  }
  return func;
}

export const PlasmicCs = Object.assign(
  // Top-level PlasmicCs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCs
    internalVariantProps: PlasmicCs__VariantProps,
    internalArgProps: PlasmicCs__ArgProps
  }
);

export default PlasmicCs;
/* prettier-ignore-end */
