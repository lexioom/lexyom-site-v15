// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3Qa6q3s1gm91eHXRuPwyBY
// Component: ppvtbwqa_1
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_lexyom_site_v_1.module.css"; // plasmic-import: 3Qa6q3s1gm91eHXRuPwyBY/projectcss
import sty from "./PlasmicCommunityItem.module.css"; // plasmic-import: ppvtbwqa_1/css
import CustomerServiceSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__CustomerServiceSvgrepoCom1Svg"; // plasmic-import: hDN-H0ESm-/icon

export const PlasmicCommunityItem__VariantProps = new Array();

export const PlasmicCommunityItem__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3"
);

function PlasmicCommunityItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <CustomerServiceSvgrepoCom1SvgIcon
            className={classNames(projectcss.all, sty.svg__xraGr)}
            role={"img"}
          />
        ),

        value: args.slot3
      })}

      <div className={classNames(projectcss.all, sty.freeBox__tAs52)}>
        {p.renderPlasmicSlot({
          defaultContents: "20+",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__a18Hc)}>
        {p.renderPlasmicSlot({
          defaultContents: "Legal documents",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__cr0T)}>
        {p.renderPlasmicSlot({
          defaultContents: "to pick from",
          value: args.slot2,
          className: classNames(sty.slotTargetSlot2)
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCommunityItem__ArgProps,
      internalVariantPropNames: PlasmicCommunityItem__VariantProps
    });

    return PlasmicCommunityItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommunityItem";
  } else {
    func.displayName = `PlasmicCommunityItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCommunityItem = Object.assign(
  // Top-level PlasmicCommunityItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCommunityItem
    internalVariantProps: PlasmicCommunityItem__VariantProps,
    internalArgProps: PlasmicCommunityItem__ArgProps
  }
);

export default PlasmicCommunityItem;
/* prettier-ignore-end */
